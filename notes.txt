Magesh Kuppan

Schedule
Commence    : 09:30
Tea break   : 11:00 (for 20 mins)
Lunch break : 13:00 (for 60 mins)
Tea break   : 15:30 (for 20 mins)
Windup      : 17:30

Methodology
    No powerpoints


Name
Total Experience
Primary Skillset
Experience in Golang (if any)
Any interest book you read / shows you watched recently


Why Golang?
    Memory Efficient
    Efficient Concurrency 
    Performance equivalent to 'C' language
    Easy to learn
    Cloud friendly

    Simplicity
        25 keywords
            package, import, var, func, if, for, switch, select, make, close, chan, range, return, break, continue, fallthrough, struct, interface, type, go, in, out 

        No access modifiers (private, public, protected etc..)
        No classes (Only structs & functions)
        No inheritance (prefer composition over inheritance)
        No exceptions (only errors)
        No 'try catch finally' construct

        Analysis Paralysis
        Barry Shwartz 
            The Paradox of Choice (TED )(Book)

    Concurrency
        Golang is built for Concurrency
        language features 
            go, chan, <-, select, close, range
        Memory Efficient
            Goroutine = 4KB vs OS thread = 8 MB
            Thousands of goroutines can be spawned using 1 OS thread
            Builtin in Scheduler

    Cloud Native Friendly


http://golang.org
http://code.visualstudio.com 

Datatypes in Go
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 (real float64, imaginary float64)

    byte (alias uint8)
    rune (alias for int32, represents 1 unicode character)

    Collection Types
        Array
        Slice
        Map

    Complex Types
        Struct

    Abstraction Type
        interface


Assignment:
Create a go program that displays the following menu
1. add
2. subtract
3. multiply
4. divide
5. exit
If user option is 1 - 4, accept two number from the user and perform the operation and print the result


functions
1. variadic functions
2. higher order functions

Modularity

Modules
Packages

Pre go 1.13
    GOPATH
        bin
        pkg
        src
            github.com
                tkmagesh77
                    myApp
                        calculator
                            calculator.go (package calculator)
                        main.go
                            import github.com/tkmagesh77/myApp/calculator

When using modules
myApp
    go.mod
        module myApp
    calculator
        calculator.go (package calculator)
    main.go
        import myApp/calculator


To create a module
    go mod init <module_name>


Assignment
Aliquip magna irure eiusmod sit elit ipsum incididunt qui labore fugiat culpa ut commodo irure Excepteur duis Lorem dolor adipisicing dolor officia mollit voluptate Consectetur exercitation occaecat laboris voluptate amet aliqua esse ex anim enim Elit exercitation officia tempor consectetur consequat reprehenderit dolor labore ex veniam minim fugiat consequat Aliquip velit voluptate qui aute enim Magna labore sint nulla magna ipsum


5 letter words = 10
7 letter words = 12
3 letter words = 21


Output:
The max occurence by size of the word = 21 (word size = 3)




products := []Product{
    Product{105, "Pen", 5, 50, "Stationary"},
    Product{107, "Pencil", 2, 100, "Stationary"},
    Product{103, "Marker", 50, 20, "Utencil"},
    Product{102, "Stove", 5000, 5, "Utencil"},
    Product{101, "Kettle", 2500, 10, "Stationary"},
    Product{104, "Scribble Pad", 20, 20, "Stationary"},
}

APIs
    AddProduct()
    IndexOf(product) => index of the given product ( -1 if doesnt exists)
    Includes(product) => return true/false
    Any(critera) => return true/false if any of the product in the list satisfies the given criteria
        //Are there any stationary products?
        //Are there any costly products (cost > 50) ?
    All(critera) => return true/false if ALL the products in the list satisfies the given criteria
        //Are all staionary products?
    Filter(criteria) => filter the products by given critera
        //filter all utencils
        //filter cheap products

io related packages
    io
    ioutil
    bufio
    os

Why microservices as a web api?


101Pen10200Stationary
101Pencil10200Stationary

50
xml = 350
json = 211

grpc
    - request & response
    - client streaming
    - server streaming
    - client & server streaming

protocol buffers

tools for gRPC

go get -u github.com/golang/protobuf/protoc-gen-go
OR
brew install protobuf

in the application folder
    go get -u google.golang.org/grpc

to generate the proxy & stub
protoc ./proto/service.proto --go_out=plugins=grpc:.